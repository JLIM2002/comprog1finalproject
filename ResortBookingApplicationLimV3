 /*
 * Resort booking application
 * Version: 3
 * Authors: Jeremy Lim, Czybelle Ombao, April Cagungun, Mylene Cortez 
 */



import java.io.*;
import javax.swing.*;
import java.time.LocalDate;
import java.time.MonthDay;
import java.time.Period;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.time.LocalDate;


	public class ResortBookingApplicationLimV3
	{
        static String checkInDate = "";
        static int monthIn, dayIn, yearIn;
        static String checkOutDate = "";
        static int monthOut, dayOut, yearOut;
        static int roomsAvailable;
        static int standard, deluxe, quadruple, family, suite;
        static java.time.LocalDate checkInLocalDate;
        static java.time.LocalDate checkOutLocalDate;


public static boolean isValidDate(int month, int day, int year) 
    {
        // Check for a reasonable future year
        if (year < 2025) 
        {
            JOptionPane.showMessageDialog(null, "Year must be 2025 or later.");
            return false;
        }

        try 
        {
            // This handles invalid dates like Feb 30, April 31, leap years, etc.
            LocalDate inputDate = LocalDate.of(year, month, day);
            LocalDate today = LocalDate.now();

            // Booking must be in the future
            if (!inputDate.isAfter(today)) 
            {
                JOptionPane.showMessageDialog(null, "Booking must be for a future date.");
                return false;
            }

            return true;
        } 
        catch (Exception e) 
        {
            // This catches all date-related issues, such as bad day/month combos
            JOptionPane.showMessageDialog(null, "Invalid date entered. Please check the day and month.");
            return false;
        }
    }

    public static String getBookingSeason(int month, int day)
        {
            // Converts the date to MM/DD format for easier comparison
            int mmdd = month * 100 + day;
    
            if ((mmdd >= 601 && mmdd <= 1031)) 
            {
                return "Lean Season";
            } else if ((mmdd >= 1101 && mmdd <= 1219) || (mmdd >= 106 && mmdd <= 228)) 
            {
                return "High Season";
            } else if (mmdd >= 301 && mmdd <= 531) 
            {
                return "Peak Season";
            } else if ((mmdd >= 1220 && mmdd <= 1231) || (mmdd >= 101 && mmdd <= 105)) 
            {
                return "Super Peak Season";
            } else {
                return "Regular Season";
            }
        }

    // checkin
    public static void bookingIn() 
    {
        int yearIn;
        boolean validDate = false;
    
        do 
        {
            try 
            {
                monthIn = Integer.parseInt(JOptionPane.showInputDialog("Enter booking month (1–12):"));
                dayIn = Integer.parseInt(JOptionPane.showInputDialog("Enter booking day:"));
                yearIn = Integer.parseInt(JOptionPane.showInputDialog("Enter booking year (e.g. 2025):"));
    
                
                validDate = isValidDate(monthIn, dayIn, yearIn);
    
                if (validDate) {
                    checkInDate = String.format("%02d/%02d/%04d", monthIn, dayIn, yearIn);
    
                    int confirm = JOptionPane.showConfirmDialog(null, "You entered: " + checkInDate + 
                    "\nConfirm booking date?", "Confirm Date", JOptionPane.YES_NO_OPTION);
    
                    if (confirm == JOptionPane.YES_OPTION) 
                    {
                        JOptionPane.showMessageDialog(null, "Booking date confirmed: " + checkInDate);
                        checkInLocalDate = LocalDate.of(yearIn, monthIn, dayIn);
                    } else {
                        validDate = false;
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter numbers only.");
            }
        } while (!validDate);
    }    

    //checkout
    public static void bookingOut() {
        int yearOut;
        boolean validDate = false;
    
        do {
            try {
                monthOut = Integer.parseInt(JOptionPane.showInputDialog("Enter departure month (1–12):"));
                dayOut = Integer.parseInt(JOptionPane.showInputDialog("Enter departure day:"));
                yearOut = Integer.parseInt(JOptionPane.showInputDialog("Enter departure year (e.g. 2025):"));
    
                validDate = isValidDate(monthOut, dayOut, yearOut);
    
                if (validDate) {
                    checkOutDate = String.format("%02d/%02d/%04d", monthOut, dayOut, yearOut);
    
                    int confirm = JOptionPane.showConfirmDialog(null, "You entered: " + checkOutDate + "\nConfirm departure date?","Confirm Departure",JOptionPane.YES_NO_OPTION);
    
                    if (confirm == JOptionPane.YES_OPTION) {
                        JOptionPane.showMessageDialog(null, "Departure date confirmed: " + checkOutDate);
                        checkOutLocalDate = LocalDate.of(yearOut, monthOut, dayOut);
                    } else {
                        validDate = false; // loop again if not confirmed
                    }
                }
    
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter numbers only.");
                validDate = false;
            }
    
        } while (!validDate);
    }    


public static RoomBookingResult selectRoomBasedOnGuests(int guestStaying, boolean isLocal, LocalDate checkInDate, int standard, int deluxe, int quadruple, int family, int suite)
 {
    String[] roomNames = {"Standard", "Deluxe", "Quadruple", "Family", "Suite"};
    int[] roomCapacities = {1, 2, 4, 6, 4};
    boolean[] allowExtraBed = {true, true, true, true, false};
    int[] roomAvailable = {standard, deluxe, quadruple, family, suite};

    ArrayList<String> availableOptions = new ArrayList<>();

    for (int i = 0; i < roomNames.length; i++) {
        int capacity = roomCapacities[i];
        boolean canAddBed = allowExtraBed[i];

        int maxGuestsPerRoom = canAddBed ? capacity + 1 : capacity;
        int minRoomsNeeded = (int) Math.ceil((double) guestStaying / maxGuestsPerRoom);

        if (roomAvailable[i] >= minRoomsNeeded) {
            availableOptions.add((i + 1) + ". " + roomNames[i] + " (" + roomAvailable[i] + " available)");
        }
    }

    if (availableOptions.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No available rooms can accommodate " + guestStaying + " guests.");
        return null;
    }

    StringBuilder menu = new StringBuilder("Select a room type:\n");
    for (String option : availableOptions) {
        menu.append(option).append("\n");
    }

    int roomChoice = Integer.parseInt(JOptionPane.showInputDialog(menu.toString()));
    int roomIndex = roomChoice - 1;
    int capacity = roomCapacities[roomIndex];
    boolean canAddBed = allowExtraBed[roomIndex];

    int quantity = Integer.parseInt(JOptionPane.showInputDialog("How many rooms to book?"));
    if (quantity > roomAvailable[roomIndex]) {
        JOptionPane.showMessageDialog(null, "Not enough " + roomNames[roomIndex] + " rooms available.");
        return null;
    }

    int maxGuestsAccommodated = capacity * quantity;
    int extraBeds = 0;

    if (guestStaying > maxGuestsAccommodated) {
        int overflow = guestStaying - maxGuestsAccommodated;
        if (canAddBed && overflow <= quantity) {
            extraBeds = overflow;
        } else {
            JOptionPane.showMessageDialog(null, "Too many guests for selected room type and quantity.");
            return null;
        }
    }

    int roomRate = getRoomRate(roomNames[roomIndex], isLocal, checkInDate);
    int extraBedCost = 650;
    int totalCost = (roomRate * quantity) + (extraBeds * extraBedCost);

    if (extraBeds > 0) {
        JOptionPane.showMessageDialog(null, "Mandatory extra beds: " + extraBeds + " (₱650 each per night).");
    }

    return new RoomBookingResult(roomChoice, quantity, extraBeds, totalCost);
}


public static int addons(int guestStaying) {
    int addBlanket = 0;
    int addPillow = 0;
    int addToiletries = 0;

    final int PRICE_BLANKET = 250;
    final int PRICE_PILLOW = 100;
    final int PRICE_TOILETRIES = 200;

    boolean continueAdding = true;

    while (continueAdding) {
        int totalAddons = addBlanket + addPillow + addToiletries;

        if (totalAddons >= guestStaying) {
            JOptionPane.showMessageDialog(null, "Maximum add-ons reached! You cannot add more than the number of guests (" + guestStaying + ").");
            break;
        }

        int choice = Integer.parseInt(JOptionPane.showInputDialog(null,
                "Add-ons:\n" +
                "1. Blanket (Php " + PRICE_BLANKET + ")\n" +
                "2. Pillow (Php " + PRICE_PILLOW + ")\n" +
                "3. Toiletries (Php " + PRICE_TOILETRIES + "/set)\n" +
                "4. Continue\n\n" +
                "Total Add-ons so far: " + totalAddons + "/" + guestStaying));

        int remaining = guestStaying - totalAddons;
        int quantity;

        switch (choice) {
            case 1:
                quantity = Integer.parseInt(JOptionPane.showInputDialog(null, "How many Blankets will be added? (Max: " + remaining + ")"));
                if (quantity <= remaining) {
                    addBlanket += quantity;
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot exceed remaining add-ons limit.");
                }
                break;
            case 2:
                quantity = Integer.parseInt(JOptionPane.showInputDialog(null, "How many Pillows will be added? (Max: " + remaining + ")"));
                if (quantity <= remaining) {
                    addPillow += quantity;
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot exceed remaining add-ons limit.");
                }
                break;
            case 3:
                quantity = Integer.parseInt(JOptionPane.showInputDialog(null, "How many Toiletries will be added? (Max: " + remaining + ")"));
                if (quantity <= remaining) {
                    addToiletries += quantity;
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot exceed remaining add-ons limit.");
                }
                break;
            case 4:
                continueAdding = false;
                break;
            default:
                JOptionPane.showMessageDialog(null, "Invalid choice. Please select 1 to 4.");
        }
    }

    // Calculate total cost
    int totalAddons = (addBlanket * PRICE_BLANKET) + (addPillow * PRICE_PILLOW) + (addToiletries * PRICE_TOILETRIES);

    // Final Summary
    JOptionPane.showMessageDialog(null,
            "Add-ons Summary:\n" +
            "Blankets: " + addBlanket + " (Php " + (addBlanket * PRICE_BLANKET) + ")\n" +
            "Pillows: " + addPillow + " (Php " + (addPillow * PRICE_PILLOW) + ")\n" +
            "Toiletries: " + addToiletries + " (Php " + (addToiletries * PRICE_TOILETRIES) + ")\n" +
            "Total Add-on Cost: Php " + totalAddons);

    return totalAddons;
}


    public static void calculateBookingDuration() 
    {
        if (checkInLocalDate != null && checkOutLocalDate != null) 
        {
            long daysBetween = ChronoUnit.DAYS.between(checkInLocalDate, checkOutLocalDate);
        
            if (daysBetween > 0) 
            {
                    JOptionPane.showMessageDialog(null, "Booked: " + checkInDate + " - " + checkOutDate + "\n" + daysBetween + " days.");
            }
            else 
            {
                JOptionPane.showMessageDialog(null, 
                    "Error: Departure date must be after check-in date.");
            }
        }    
        else 
        {
            JOptionPane.showMessageDialog(null, 
                "Error: Please ensure both check-in and check-out dates are set.");
        
        }    
    }

    public static boolean isBookingWithinOneYear() 
    {
        if (checkInLocalDate == null || checkOutLocalDate == null) return false;

        long daysBetween = ChronoUnit.DAYS.between(checkInLocalDate, checkOutLocalDate);

        if (daysBetween <= 0) {
            JOptionPane.showMessageDialog(null, "Check-out must be after check-in.");
            return false;
        }

    if (daysBetween > 365) {
        JOptionPane.showMessageDialog(null, "Booking cannot be longer than 1 year.");
        return false;
    }

    return true;
    }

    public static void processChildren(int guestStaying) {
        int minorAge = 0;
        int adultAge = 0;
        int childrenCounter = 0;

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");

        try {
            int childrenCount = Integer.parseInt(JOptionPane.showInputDialog(null, "How many children?"));

            if (childrenCount == 0) {
                JOptionPane.showMessageDialog(null, "No children entered.");
                return;
            }

            do {
                childrenCounter++;
                boolean validDate = false;
                int age = 0;

                while (!validDate) {
                    try {
                        String input = JOptionPane.showInputDialog(
                                "Enter birthdate of child #" + childrenCounter + " (MM/dd/yyyy):\n" +
                                        "Bed Policy:\nAges 1–7: Stay free using existing bedding\n" +
                                        "Ages 8–17: Considered adult. Must avail extra bed.");

                        if (input == null) return; // Cancel pressed

                        LocalDate birthDate = LocalDate.parse(input, formatter);
                        LocalDate today = LocalDate.now();

                        if (birthDate.isAfter(today)) {
                            JOptionPane.showMessageDialog(null, "Birthdate cannot be in the future.");
                        } else {
                            age = Period.between(birthDate, today).getYears();
                            validDate = true;
                        }
                    } catch (DateTimeParseException e) {
                        JOptionPane.showMessageDialog(null, "Invalid date format. Please use MM/dd/yyyy.");
                    }
                }

                if (age <= 0) {
                    JOptionPane.showMessageDialog(null, "Enter a valid age.");
                } else if (age >= 1 && age <= 7) {
                    minorAge++;
                } else if (age >= 8 && age <= 17) {
                    adultAge++;
                } else {
                    JOptionPane.showMessageDialog(null, "Adult age entered.");
                }

            } while (childrenCounter < childrenCount);

            // Final summary
            int old = guestStaying - childrenCount;
            JOptionPane.showMessageDialog(null, "Total Guests: " + guestStaying + "\n Adult: " + old + "\n Minor: " + minorAge + " | Young Adult: " + adultAge);

            if (adultAge > 0) {
                JOptionPane.showMessageDialog(null, "Must avail extra bedding for " + adultAge + " child(ren).");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input. Please enter a number.");
        }
    }
    
    public static boolean isLocalDestination(String location) {
    switch (location.toLowerCase()) {
        case "baguio":
        case "boracay":
        case "el nido":
        case "siargao":
            return true;
        case "hong kong":
        case "japan":
        case "singapore":
        case "south korea":
            return false;
        default:
            return false; // Assume international for any unknown
    }
}

private static String getSeason(LocalDate date) {
    MonthDay md = MonthDay.of(date.getMonth(), date.getDayOfMonth());
    if ((md.isAfter(MonthDay.of(5, 31)) && md.isBefore(MonthDay.of(11, 1)))) {
        return "Lean";
    } else if ((md.isAfter(MonthDay.of(10, 31)) && md.isBefore(MonthDay.of(12, 20))) ||
               (md.isAfter(MonthDay.of(1, 5)) && md.isBefore(MonthDay.of(3, 1)))) {
        return "High";
    } else if ((md.isAfter(MonthDay.of(2, 28)) && md.isBefore(MonthDay.of(6, 1)))) {
        // Check Super Peak ranges inside Peak
        if ((md.isAfter(MonthDay.of(2, 16)) && md.isBefore(MonthDay.of(3, 4))) ||
            (md.isAfter(MonthDay.of(3, 28)) && md.isBefore(MonthDay.of(4, 6)))) {
            return "Super Peak";
        }
        return "Peak";
    } else {
        return "Super Peak";
    }
}

private static int getRoomRate(String roomType, boolean isLocal, LocalDate checkInDate) {
    String season = getSeason(checkInDate);
    Map<String, Map<String, Integer>> localRates = Map.of(
        "Standard", Map.of("Lean", 2000, "High", 4000, "Peak", 6000, "Super Peak", 9000),
        "Deluxe", Map.of("Lean", 3000, "High", 5000, "Peak", 8000, "Super Peak", 12000),
        "Quadruple", Map.of("Lean", 4000, "High", 7000, "Peak", 10000, "Super Peak", 15000),
        "Family", Map.of("Lean", 5000, "High", 9000, "Peak", 12000, "Super Peak", 18000),
        "Suite", Map.of("Lean", 6000, "High", 11000, "Peak", 14000, "Super Peak", 21000)
    );

    Map<String, Map<String, Integer>> intlRates = Map.of(
        "Standard", Map.of("Lean", 2500, "High", 4500, "Peak", 6500, "Super Peak", 10000),
        "Deluxe", Map.of("Lean", 5000, "High", 7000, "Peak", 9000, "Super Peak", 13000),
        "Quadruple", Map.of("Lean", 7500, "High", 9500, "Peak", 11500, "Super Peak", 16000),
        "Family", Map.of("Lean", 10000, "High", 12000, "Peak", 14000, "Super Peak", 19000),
        "Suite", Map.of("Lean", 12500, "High", 14500, "Peak", 16500, "Super Peak", 22000)
    );

    return isLocal ? localRates.get(roomType).get(season) : intlRates.get(roomType).get(season);
}

public static class RoomBookingResult {
    public int roomChoice;
    public int roomsBooked;
    public int extraBeds;
    public double totalRoomCost;

    public RoomBookingResult(int roomChoice, int roomsBooked, int extraBeds, double totalRoomCost) {
        this.roomChoice = roomChoice;
        this.roomsBooked = roomsBooked;
        this.extraBeds = extraBeds;
        this.totalRoomCost = totalRoomCost;
    }
}




   		public static void main(String [] args) 
   		{

			String location, name, pwdAssistanceInfo;
            String seasonIn = getBookingSeason(monthIn, dayIn);
            String seasonOut = getBookingSeason(monthOut, dayOut);
			int pwdAssistance, childrenCount, book, guestStaying, childrenAge, addonsConfirmation;
			int childrenCounter;
            int standard = 5;
            int deluxe = 5;
            int quadruple = 5;
            int family = 5;
            int suite = 5;
            int totalAddons = 0;


            book = JOptionPane.YES_OPTION;
			location = "";
            name = "";
            guestStaying = 0;
			childrenCount = 0;
			childrenAge = 0;
			childrenCounter = 0;
			int minorAge = 0;
			int adultAge = 0;
            boolean validBooking = false;


			//input
			//ASK FOR THE LOCATION OF CHECK IN
			//CHECK IN
            
			book = JOptionPane.showConfirmDialog(null, "Would you like to book", "Booking Hotel",JOptionPane.YES_NO_OPTION);


			while (book == JOptionPane.YES_OPTION) 
            {
				boolean validLocation = false;
						
				while (!validLocation) 
                {
					location = JOptionPane.showInputDialog(null, "Where would you like to go?\nSupported Locations:\nLocal:        International:\nBaguio      Hongkong\nBoracay     Japan\nEl Nido     Singapore\nSiargao     South Korea", "Lanlya Star Hotel Booking", JOptionPane.QUESTION_MESSAGE);
			

					//CANCEL BUTTON
					if (location == null) 
                    {
						break;
					}
			
					switch (location.toLowerCase()) 
                    {
						case "baguio":
						case "boracay":
						case "el nido":
						case "siargao":
						case "hong kong":
						case "japan":
						case "singapore":
						case "south korea":
							validLocation = true;
							JOptionPane.showMessageDialog(null, "You have selected: " + location);
							break;
						default:
							JOptionPane.showMessageDialog(null, "Invalid location. Please choose a valid destination.");
                        }
                    }

                boolean isLocal = isLocalDestination(location);   
                    
            do {
                bookingIn();
                bookingOut();
                
                if (isBookingWithinOneYear()) 
                {
                    calculateBookingDuration(); // success
                    validBooking = true;       // exit the loop
                }

                if (monthIn == monthOut && dayIn == dayOut && yearIn == yearOut)
                {
                    JOptionPane.showMessageDialog(null, "Overlapping dates. Try again.");
                }


            } while (monthIn == monthOut && dayIn == dayOut && yearIn == yearOut || !validBooking);
            

			//Asks for the staying Guests
//            do {
                
                guestStaying = Integer.parseInt(JOptionPane.showInputDialog(null, "How many guests are staying?"));
            
//            }while (guestStaying != 0);

            
            processChildren(guestStaying);
            
			RoomBookingResult result;

            //Rooms5
            do {
            result = selectRoomBasedOnGuests(guestStaying,isLocal,checkInLocalDate,standard,deluxe,quadruple,family,suite);


            if (result != null) {
            // Access result.roomChoice, result.roomsBooked, result.extraBeds, result.totalRoomCost
            JOptionPane.showMessageDialog(null, "Booking successful!");
            } else {
            JOptionPane.showMessageDialog(null, "Room booking failed or cancelled.");
            }

            } while (result == null);

            addonsConfirmation = JOptionPane.showConfirmDialog(null, "Avail Ammenities?", "Ammenities", JOptionPane.YES_NO_OPTION);


            if (addonsConfirmation == JOptionPane.YES_OPTION) 
            {
                totalAddons = addons(guestStaying);
            }

            
			pwdAssistance = JOptionPane.showConfirmDialog(null,"Does the room need to be PWD friendly room?", "Set PWD friendly room", JOptionPane.YES_NO_OPTION);
			name = JOptionPane.showInputDialog(null, "What will be the name for the booking? ");
			JOptionPane.showMessageDialog(null, "Welcome to Hotel Transelvania. Please enjoy your Stay <3");
			pwdAssistanceInfo = "No response provided";
            pwdAssistance = 0;
			if (pwdAssistance == 0) 
			{
				pwdAssistanceInfo = "Assisting your room for pwd assistance";
			}
			
			if (pwdAssistance == 1)
			{
				pwdAssistanceInfo = "Without any need of special assistance";
			}
           
            
            //Computation

            //date
            //guest
            //bed
            //ammenities

			
			//output
			/*JOptionPane.showMessageDialog(null, "Hello, Welcome to Hotel Tanselvania " + name + 
			"\n You would like to go to " + location + " on " + checkInDate + " " + seasonIn + " and leave on " + checkOutDate + " " + seasonOut + " with " + guestStaying
			+ " \n guest staying with " + childrenCount + " children" + " and " + " no of rooms " + pwdAssistanceInfo + ".");
*/
            JOptionPane.showMessageDialog(null, "Receipt " + result + "" + totalAddons + " ");
			break;	
        }
    }
}
